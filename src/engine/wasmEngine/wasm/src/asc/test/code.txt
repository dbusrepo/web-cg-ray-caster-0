const arr = newSArray<u32>(10, 2);

logi(offsetof<Pointer<usize>>());

store<u32>(0, 2);
logi(load<u32>(0));
// logi(offsetof<Pointer<usize>>());
const p = new Pointer<usize>(0);
p.deref = 3;
logi(load<u32>(0));

if (isManaged<T>()) ERROR("Unsafe unmanaged set of a managed object");

let arr = newDArray<u32>(2);
logi(arr.length);
logi(<u32>arr.start);

arr.push(4);
arr.push(5);
arr.push(6);
arr.push(6);
arr.push(6);
arr.push(6);
arr.push(6);
arr.push(6);
arr.push(6);
logi(arr.length);
logi(arr[0]);
logi(arr[1]);

arr.push(5);

arr.set(4, 2);
arr.set(8, 3);
@ts-ignore

arr[1] = 2;
arr[2] = 3;
logi(arr[1]);
logi(arr[2]);

// // logi(arr.end);
logi(changetype<usize>(arr.atIdx(0)));
logi(changetype<usize>(arr.atIdx(1)));
// deleteVector(arr);

logi(<i32>process.hrtime());

if (workerIdx == 0) {
  store<u32>(imagesIndexOffset, 23);
}

// @ts-ignore: decorator
// @inline function align<T>(): SIZE_T {
//   return alignof<T>();
// }

logi(alignof<usize>());
logi(sizeof<usize>());

logi(usePalette);
logi(imagesIndexOffset);
logi(load<u32>(imagesIndexOffset));
logi(load<u32>(imagesIndexOffset+16));

logi(atomic.load<u32>(imagesIndexOffset));
logi(load<u8>(imagesIndexOffset+24));

const imgsArr = loadImages();
let image = changetype<BitImage>(imgsArr);
logi(image.pixels);
logi(load<u8>(image.pixels));
image = changetype<BitImage>(imgsArr + BitImage.size);
logi(image.pixels);

let v = vec3Alloc.new();
v = vec3Alloc.new();
v.init(3, 4, 5);
logf(v.x);

